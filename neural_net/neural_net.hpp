#ifndef __NEURAL_NET_HPP__
#define __NEURAL_NET_HPP__

/************************************************************************/

#include "base_neuron.hpp"

/************************************************************************/

class NeuralNet
{

/************************************************************************/

public:

/************************************************************************/

	using topology_t = std::vector< std::size_t >;

/************************************************************************/
	
	NeuralNet( topology_t const& _topology );

	~NeuralNet();

/************************************************************************/

	void randomizeWeights() noexcept;

	void feedForward( std::vector< double > const& _input ) noexcept;

	std::vector< double > getResults() const noexcept;

/************************************************************************/

	// void mutate() noexcept;

	// NeuralNet crossover( NeuralNet const& _other );

/************************************************************************/

private:

/************************************************************************/

	std::vector< INeuron::Layer > m_layers;

/************************************************************************/

}; // class NeuralNet

/************************************************************************/

#endif // __NEURAL_NET_HPP__
